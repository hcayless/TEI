<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright TEI Consortium. 
Dual-licensed under CC-by and BSD2 licences 
See the file COPYING.txt for details
$Date$
$Id$
-->
<?xml-model href="https://jenkins.tei-c.org/job/TEIP5-dev/lastSuccessfulBuild/artifact/P5/release/xml/tei/odd/p5.nvdl" type="application/xml" schematypens="http://purl.oclc.org/dsdl/nvdl/ns/structure/1.0"?>
<elementSpec xmlns="http://www.tei-c.org/ns/1.0" xmlns:sch="http://purl.oclc.org/dsdl/schematron" module="tagdocs" ident="constraintSpec">
  <gloss versionDate="2009-06-10" xml:lang="en">constraint on schema</gloss>
  <desc versionDate="2017-06-24" xml:lang="en">contains a formal constraint, typically expressed in a rule-based schema language, to which a construct must conform in order to be considered valid<!--ebb: old description of 2009-06-10 was: "contains  a constraint, expressed in some formal syntax,
  which cannot be expressed in the structural content model"--></desc>
  <classes>
    <memberOf key="att.global"/>
    <memberOf key="att.identified"/>
    <memberOf key="att.typed"/>
    <memberOf key="model.oddDecl"/>
  </classes>
  <content>
    <sequence>
      <alternate minOccurs="0" maxOccurs="unbounded">
        <classRef key="model.identSynonyms"/>
        <classRef key="model.descLike"/>
      </alternate>
      <elementRef key="constraint" minOccurs="0" maxOccurs="1"/>
    </sequence>
  </content>
  <constraintSpec scheme="schematron" ident="empty-based-on-mode">
    <!-- 
         This constraint specification is much like the
         "child-constraint-based-on-mode" for <elementSpec>, which
         does something something similar (in that it is based on
         @mode), but not quite the same.
    -->
    <constraint>
      <sch:rule context="tei:constraintSpec[ @mode eq 'delete']">
        <sch:report test="child::*">This constraintSpec element has a mode= of "delete" even though it has child elements. Change the mode= to "add", "change", or "replace", or remove the child elements.</sch:report>
      </sch:rule>
      <sch:rule context="tei:constraintSpec[ @mode eq 'change']">
        <sch:assert test="child::*">This constraintSpec element has a mode= of "change", but does not have any child elements. Specify child elements, or change the mode= to "delete".</sch:assert>
      </sch:rule>
      <sch:rule context="tei:constraintSpec[ @mode = ('add','replace') ]">
        <sch:assert test="child::tei:constraint">This constraintSpec element has a mode= of "<sch:value-of select="@mode"/>", but does not have a child 'constraint' element. Use a child 'constraint' element or change the mode= to "delete" or "change".</sch:assert>
      </sch:rule>
    </constraint>
  </constraintSpec>
  <constraintSpec ident="sch_no_more" scheme="schematron">
    <desc xml:lang="en" versionDate="2018-07-06">Relationship between scheme attribute and contents: Schematron 1.x</desc>
    <constraint>
      <sch:ns prefix="s" uri="http://www.ascc.net/xml/schematron"/>
      <sch:report test="tei:constraint/s:* and @scheme = ('isoschematron','schematron')">Rules
        in the Schematron 1.* language must be inside a constraintSpec
        with a value other than 'schematron' or 'isoschematron' on the
        scheme attribute</sch:report>
    </constraint>
  </constraintSpec>
  <constraintSpec ident="isosch" scheme="schematron">
    <desc xml:lang="en" versionDate="2018-07-06">Relationship between scheme attribute and contents: ISO Schematron</desc>
    <constraint>
      <sch:ns prefix="sch" uri="http://purl.oclc.org/dsdl/schematron"/>
      <sch:report test="tei:constraint/sch:* and not( @scheme eq 'schematron')">Rules
        in the ISO Schematron language must be inside a constraintSpec
        with the value 'schematron' on the scheme attribute</sch:report>
    </constraint>
  </constraintSpec>
  <constraintSpec ident="needrules" scheme="schematron">
    <constraint>
      <sch:ns prefix="sch" uri="http://purl.oclc.org/dsdl/schematron"/>
      <sch:rule context="tei:macroSpec/tei:constraintSpec[@scheme eq 'schematron']/tei:constraint">
        <sch:report test="sch:assert|sch:report">An ISO Schematron constraint specification for a macro should not
        have an 'assert' or 'report' element without a parent 'rule' element</sch:report>
      </sch:rule>
    </constraint>
  </constraintSpec>
  <constraintSpec ident="unique-constraintSpec-ident" scheme="schematron">
    <constraint>
      <sch:rule context="tei:constraintSpec[ @mode eq 'add' or not( @mode ) ]">
        <sch:let name="myIdent" value="normalize-space(@ident)"/>
        <sch:report test="preceding::tei:constraintSpec[ normalize-space(@ident) eq $myIdent ]">
        The @ident of 'constraintSpec' should be unique; this one (<sch:value-of select="$myIdent"/>) is the same as that of a previous 'constraintSpec'.
        </sch:report>
      </sch:rule>
    </constraint>
  </constraintSpec>
  <attList>
    <attDef ident="scheme" usage="req">
      <desc versionDate="2009-06-10" xml:lang="en">supplies the name of the language in which the constraints
      are defined</desc>
      <datatype><dataRef key="teidata.enumerated"/></datatype>
      <valList type="semi">
        <valItem ident="schematron">
          <gloss versionDate="2016-09-27" xml:lang="en">ISO Schematron</gloss>
        </valItem>
      </valList>
      <remarks versionDate="2021-09-27" xml:lang="en">
        <p>These Guidelines no longer recommend, and the current TEI
        stylesheets no longer support, the use of Schematron 1.x
        within <gi>constraintSpec</gi>. Thus the value
        <val>schematron</val> is used to indicate that ISO Schematron
        is used within the <gi>constraintSpec</gi>.</p>
      </remarks>
    </attDef>
    <attDef ident="type" mode="replace">
      <desc versionDate="2018-09-17" xml:lang="en">characterizes the
      <gi>constraintSpec</gi> element in some sense; used to indicate
      when a <gi>constraintSpec</gi> warns about a deprecated
      construct.</desc>
      <datatype><dataRef key="teidata.enumerated"/></datatype>
      <valList type="semi" mode="add">
        <valItem ident="deprecationWarning">
          <desc xml:lang="en" versionDate="2018-09-17">Indicates that
          this constraint specification warns that some other
          construct in the schema is deprecated.</desc>
        </valItem>
      </valList>
    </attDef>
  </attList>
  <exemplum xml:lang="en">
    <p>This constraint uses Schematron to enforce the presence of the
    <att>spanTo</att> attribute (which comes from an attribute class)
    on the <gi>addSpan</gi> element: </p>
    <egXML xmlns="http://www.tei-c.org/ns/Examples">
      <constraintSpec ident="demo-c1" scheme="schematron">
        <desc>Enforce the presence of the <att>spanTo</att> attribute</desc>
        <constraint>
          <sch:assert test="@spanTo">The spanTo= attribute of <sch:name/>
          is required.</sch:assert>
        </constraint>
      </constraintSpec>
    </egXML>
  </exemplum>
  <exemplum xml:lang="en">
    <egXML xmlns="http://www.tei-c.org/ns/Examples">
      <constraintSpec ident="demo-c2" scheme="schematron">
        <desc>Implement an accessibility rule which says that pictures
        should have textual explanations</desc>
        <constraint>
          <sch:report test="not(tei:figDesc or tei:head)"> You should
          provide information in a figure from which
          we can construct an alt attribute in HTML </sch:report>
        </constraint>
      </constraintSpec>
    </egXML>
  </exemplum>
  <exemplum xml:lang="en">
    <p>This constraint uses SPITBOL (a language which is not
    expressed in XML) to check whether the title and author are identical: </p>
    <egXML xmlns="http://www.tei-c.org/ns/Examples">
      <constraintSpec ident="author_ne_title" scheme="SPITBOL">
        <constraint> 
(output = leq(title,author)  "title and author cannot be the same")
        </constraint>
      </constraintSpec>
    </egXML>
  </exemplum>
  <remarks xml:lang="en" versionDate="2022-04-09">
    <p>A child <gi>constraint</gi> is required when the
    <att>mode</att> attribute has the value <val>replace</val> or
    <val>add</val> (or is not specified, as <val>add</val> is the
    default). No child elements are permitted when the <att>mode</att>
    attribute has the value <val>delete</val>. At least one child
    element is required when the <att>mode</att> attribute has the
    value <val>change</val>.</p>
  </remarks>
  <listRef>
    <ptr target="#TDTAG"/>
  </listRef>
</elementSpec>
